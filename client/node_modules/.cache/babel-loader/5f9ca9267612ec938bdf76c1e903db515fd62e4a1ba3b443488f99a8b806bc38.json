{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attachListeners = void 0;\nvar socket_io_1 = require(\"./socket-io\");\nvar constants_1 = require(\"./constants\");\nvar util_1 = require(\"./util\");\nvar bindMessageHandler = function (webSocketInstance, optionsRef, setLastMessage) {\n  webSocketInstance.onmessage = function (message) {\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n    setLastMessage(message);\n  };\n};\nvar bindOpenHandler = function (webSocketInstance, optionsRef, setReadyState, reconnectCount) {\n  webSocketInstance.onopen = function (event) {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(constants_1.ReadyState.OPEN);\n  };\n};\nvar bindCloseHandler = function (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) {\n  if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return function () {};\n  }\n  (0, util_1.assertIsWebSocket)(webSocketInstance, optionsRef.current.skipAssert);\n  var reconnectTimeout;\n  webSocketInstance.onclose = function (event) {\n    var _a;\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(constants_1.ReadyState.CLOSED);\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      var reconnectAttempts = (_a = optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n      if (reconnectCount.current < reconnectAttempts) {\n        var nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ? optionsRef.current.reconnectInterval(reconnectCount.current) : optionsRef.current.reconnectInterval;\n        reconnectTimeout = window.setTimeout(function () {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval !== null && nextReconnectInterval !== void 0 ? nextReconnectInterval : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(\"Max reconnect attempts of \".concat(reconnectAttempts, \" exceeded\"));\n      }\n    }\n  };\n  return function () {\n    return reconnectTimeout && window.clearTimeout(reconnectTimeout);\n  };\n};\nvar bindErrorHandler = function (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) {\n  var reconnectTimeout;\n  webSocketInstance.onerror = function (error) {\n    var _a;\n    optionsRef.current.onError && optionsRef.current.onError(error);\n    if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose(__assign(__assign({}, error), {\n        code: 1006,\n        reason: \"An error occurred with the EventSource: \".concat(error),\n        wasClean: false\n      }));\n      setReadyState(constants_1.ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < ((_a = optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT)) {\n        var nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ? optionsRef.current.reconnectInterval(reconnectCount.current) : optionsRef.current.reconnectInterval;\n        reconnectTimeout = window.setTimeout(function () {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval !== null && nextReconnectInterval !== void 0 ? nextReconnectInterval : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts);\n        console.warn(\"Max reconnect attempts of \".concat(optionsRef.current.reconnectAttempts, \" exceeded\"));\n      }\n    }\n  };\n  return function () {\n    return reconnectTimeout && window.clearTimeout(reconnectTimeout);\n  };\n};\nvar attachListeners = function (webSocketInstance, setters, optionsRef, reconnect, reconnectCount, sendMessage) {\n  var setLastMessage = setters.setLastMessage,\n    setReadyState = setters.setReadyState;\n  var interval;\n  var cancelReconnectOnClose;\n  var cancelReconnectOnError;\n  if (optionsRef.current.fromSocketIO) {\n    interval = (0, socket_io_1.setUpSocketIOPing)(sendMessage);\n  }\n  bindMessageHandler(webSocketInstance, optionsRef, setLastMessage);\n  bindOpenHandler(webSocketInstance, optionsRef, setReadyState, reconnectCount);\n  cancelReconnectOnClose = bindCloseHandler(webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount);\n  cancelReconnectOnError = bindErrorHandler(webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount);\n  return function () {\n    setReadyState(constants_1.ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\nexports.attachListeners = attachListeners;","map":{"version":3,"names":["socket_io_1","require","constants_1","util_1","bindMessageHandler","webSocketInstance","optionsRef","setLastMessage","onmessage","message","current","onMessage","filter","bindOpenHandler","setReadyState","reconnectCount","onopen","event","onOpen","ReadyState","OPEN","bindCloseHandler","reconnect","isEventSourceSupported","EventSource","assertIsWebSocket","skipAssert","reconnectTimeout","onclose","onClose","CLOSED","shouldReconnect","reconnectAttempts","_a","DEFAULT_RECONNECT_LIMIT","nextReconnectInterval","reconnectInterval","window","setTimeout","DEFAULT_RECONNECT_INTERVAL_MS","onReconnectStop","console","warn","concat","clearTimeout","bindErrorHandler","onerror","error","onError","__assign","code","reason","wasClean","close","retryOnError","attachListeners","setters","sendMessage","interval","cancelReconnectOnClose","cancelReconnectOnError","fromSocketIO","setUpSocketIOPing","CLOSING","clearInterval","exports"],"sources":["C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\node_modules\\react-use-websocket\\src\\lib\\attach-listener.ts"],"sourcesContent":["import { MutableRefObject } from 'react';\r\nimport { setUpSocketIOPing } from './socket-io';\r\nimport {\r\n  DEFAULT_RECONNECT_LIMIT,\r\n  DEFAULT_RECONNECT_INTERVAL_MS,\r\n  ReadyState,\r\n  isEventSourceSupported,\r\n} from './constants';\r\nimport { Options, SendMessage, WebSocketLike } from './types';\r\nimport { assertIsWebSocket } from './util';\r\n\r\nexport interface Setters {\r\n  setLastMessage: (message: WebSocketEventMap['message']) => void;\r\n  setReadyState: (readyState: ReadyState) => void;\r\n}\r\n\r\nconst bindMessageHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setLastMessage: Setters['setLastMessage'],\r\n) => {\r\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\r\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\r\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\r\n      return;\r\n    }\r\n    setLastMessage(message);\r\n  };\r\n};\r\n\r\nconst bindOpenHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setReadyState: Setters['setReadyState'],\r\n  reconnectCount: MutableRefObject<number>,\r\n) => {\r\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\r\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\r\n    reconnectCount.current = 0;\r\n    setReadyState(ReadyState.OPEN);\r\n  };\r\n};\r\n\r\nconst bindCloseHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setReadyState: Setters['setReadyState'],\r\n  reconnect: () => void,\r\n  reconnectCount: MutableRefObject<number>,\r\n) => {\r\n  if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\r\n    return () => {};\r\n  }\r\n  assertIsWebSocket(webSocketInstance, optionsRef.current.skipAssert);\r\n  let reconnectTimeout: number;\r\n\r\n  webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\r\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\r\n    setReadyState(ReadyState.CLOSED);\r\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\r\n      const reconnectAttempts = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\r\n      if (reconnectCount.current < reconnectAttempts) {\r\n        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\r\n          optionsRef.current.reconnectInterval(reconnectCount.current) :\r\n          optionsRef.current.reconnectInterval;\r\n\r\n        reconnectTimeout = window.setTimeout(() => {\r\n          reconnectCount.current++;\r\n          reconnect();\r\n        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\r\n      } else {\r\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\r\n        console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\r\n};\r\n\r\nconst bindErrorHandler = (\r\n  webSocketInstance: WebSocketLike,\r\n  optionsRef: MutableRefObject<Options>,\r\n  setReadyState: Setters['setReadyState'],\r\n  reconnect: () => void,\r\n  reconnectCount: MutableRefObject<number>,\r\n) => {\r\n  let reconnectTimeout: number;\r\n\r\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\r\n    optionsRef.current.onError && optionsRef.current.onError(error);\r\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\r\n      optionsRef.current.onClose && optionsRef.current.onClose({\r\n        ...error,\r\n        code: 1006,\r\n        reason: `An error occurred with the EventSource: ${error}`,\r\n        wasClean: false,\r\n      });\r\n\r\n      setReadyState(ReadyState.CLOSED);\r\n      webSocketInstance.close();\r\n    }\r\n    \r\n    if (optionsRef.current.retryOnError) {\r\n      if (reconnectCount.current < (optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT)) {\r\n        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\r\n          optionsRef.current.reconnectInterval(reconnectCount.current) :\r\n          optionsRef.current.reconnectInterval;\r\n\r\n        reconnectTimeout = window.setTimeout(() => {\r\n          reconnectCount.current++;\r\n          reconnect();\r\n        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\r\n      } else {\r\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts as number);\r\n        console.warn(`Max reconnect attempts of ${optionsRef.current.reconnectAttempts} exceeded`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\r\n};\r\n\r\nexport const attachListeners = (\r\n    webSocketInstance: WebSocketLike,\r\n    setters: Setters,\r\n    optionsRef: MutableRefObject<Options>,\r\n    reconnect: () => void,\r\n    reconnectCount: MutableRefObject<number>,\r\n    sendMessage: SendMessage,\r\n  ): (() => void) => {\r\n  const { setLastMessage, setReadyState } = setters;\r\n\r\n  let interval: number;\r\n  let cancelReconnectOnClose: () => void;\r\n  let cancelReconnectOnError: () => void;\r\n\r\n  if (optionsRef.current.fromSocketIO) {\r\n    interval = setUpSocketIOPing(sendMessage);\r\n  }\r\n\r\n  bindMessageHandler(\r\n    webSocketInstance,\r\n    optionsRef,\r\n    setLastMessage,\r\n  );\r\n\r\n  bindOpenHandler(\r\n    webSocketInstance,\r\n    optionsRef,\r\n    setReadyState,\r\n    reconnectCount,\r\n  );\r\n\r\n  cancelReconnectOnClose = bindCloseHandler(\r\n    webSocketInstance,\r\n    optionsRef,\r\n    setReadyState,\r\n    reconnect,\r\n    reconnectCount,\r\n  );\r\n\r\n  cancelReconnectOnError = bindErrorHandler(\r\n    webSocketInstance,\r\n    optionsRef,\r\n    setReadyState,\r\n    reconnect,\r\n    reconnectCount,\r\n  );\r\n\r\n  return () => {\r\n    setReadyState(ReadyState.CLOSING);\r\n    cancelReconnectOnClose();\r\n    cancelReconnectOnError();\r\n    webSocketInstance.close();\r\n    if (interval) clearInterval(interval);\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}