{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jamari\\\\Documents\\\\Hobbies\\\\Coding\\\\draftlol\\\\client\\\\src\\\\Components\\\\CountdownTimer.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { isTimer } from '../App/Types/champ-select-types';\nimport '../Pages/draft-styles.css';\nimport { useWebSocket } from 'react-use-websocket/dist/lib/use-websocket';\nimport { BASE_URL } from '../App/Slices/baseurl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CountdownTimer = () => {\n  _s();\n  const [time, setTime] = useState(null);\n  const {\n    sendMessage\n  } = useWebSocket(BASE_URL, {\n    onOpen: () => console.log('connection opened'),\n    onClose: () => console.log('connection closed'),\n    onMessage: message => {\n      let timer = JSON.parse(message.data);\n      /*might need if statement so this only runs if the timer differs from the requestBody.\r\n      Alternatively make it so timer only sends a restart message back and forth.\r\n      keep the actual timer entirely frontend*/\n      if (isTimer(timer)) {\n        setTime(timer);\n      }\n    },\n    share: true,\n    ///maybe share should be false\n    retryOnError: true,\n    shouldReconnect: () => true\n  });\n  const handleReset = () => {\n    setTime({\n      seconds: 0\n    });\n    sendMessage(JSON.stringify({\n      minutes: 0,\n      seconds: 0\n    }));\n    console.log('reseting');\n  };\n  const tick = () => {\n    if (isTimer(time)) {\n      if (time.seconds > 0) {\n        setTime({\n          seconds: time.seconds - 1\n        });\n      }\n    }\n  };\n\n  ///this news effect needs to reset if the target changes I believe putting it in the dependency array does this\n  ///connect thing to handleConfirm to reset the timer\n  useEffect(() => {\n    if ((time === null || time === void 0 ? void 0 : time.seconds) === 0) {\n      handleReset();\n    } else {\n      const timerId = setInterval(() => tick(), 1000);\n      return () => clearInterval(timerId);\n    }\n  }, [time]);\n  if ((time === null || time === void 0 ? void 0 : time.seconds) != undefined) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${time.seconds.toString().padStart(2, '0')}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n_s(CountdownTimer, \"KjVzS3SFrFb2syniYJeYFO+7Jjg=\", false, function () {\n  return [useWebSocket];\n});\n_c = CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["useEffect","useState","isTimer","useWebSocket","BASE_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","CountdownTimer","_s","time","setTime","sendMessage","onOpen","console","log","onClose","onMessage","message","timer","JSON","parse","data","share","retryOnError","shouldReconnect","handleReset","seconds","stringify","minutes","tick","timerId","setInterval","clearInterval","undefined","className","children","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jamari/Documents/Hobbies/Coding/draftlol/client/src/Components/CountdownTimer.tsx"],"sourcesContent":["import {useEffect,useState} from 'react'\r\nimport { Timer, DraftList, DraftRequest, isTimer} from '../App/Types/champ-select-types'\r\nimport '../Pages/draft-styles.css'\r\nimport { useWebSocket } from 'react-use-websocket/dist/lib/use-websocket'\r\nimport { BASE_URL } from '../App/Slices/baseurl'\r\n\r\nexport const CountdownTimer = () => { \r\n  const [time, setTime] = useState<Timer|null>(null)\r\n  \r\n  const {sendMessage} = useWebSocket(BASE_URL, {\r\n    onOpen: () => console.log('connection opened'),\r\n    onClose: () => console.log('connection closed'),\r\n    onMessage: (message:WebSocketEventMap['message']) => {\r\n      let timer:Timer = JSON.parse(message.data)\r\n      /*might need if statement so this only runs if the timer differs from the requestBody.\r\n      Alternatively make it so timer only sends a restart message back and forth.\r\n      keep the actual timer entirely frontend*/\r\n      if(isTimer(timer)){\r\n        setTime(timer)\r\n      }\r\n    },\r\n\r\n    share:true, ///maybe share should be false\r\n    retryOnError: true,\r\n    shouldReconnect: () => true\r\n  })\r\n  \r\n  const handleReset = () => {\r\n    setTime({seconds: 0})\r\n    sendMessage(JSON.stringify({minutes: 0, seconds: 0}))\r\n    console.log('reseting')\r\n  }\r\n  \r\n  const tick = () => {\r\n    if (isTimer(time)){\r\n      if (time.seconds>0) {\r\n        setTime({seconds:time.seconds-1})\r\n      }\r\n    }  \r\n  }\r\n\r\n  ///this news effect needs to reset if the target changes I believe putting it in the dependency array does this\r\n  ///connect thing to handleConfirm to reset the timer\r\n  useEffect(() => {\r\n    if(time?.seconds===0){\r\n      handleReset()\r\n    }\r\n    else{ \r\n      const timerId = setInterval(() => tick(), 1000);\r\n      return () => clearInterval(timerId)\r\n    }\r\n  },[time])\r\n  \r\n  if(time?.seconds!=undefined){\r\n    return (\r\n      <div className='timer'>\r\n        <p>{`${time.seconds.toString().padStart(2, '0')}`}</p> \r\n      </div>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <></>\r\n    )\r\n  }\r\n  \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}