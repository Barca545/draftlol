{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jamari\\\\Documents\\\\Hobbies\\\\Coding\\\\draftlol\\\\client\\\\src\\\\Components\\\\CountdownTimer.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport '../Pages/draft-styles.css';\nimport { useWebSocket } from 'react-use-websocket/dist/lib/use-websocket';\nimport { BASE_URL } from '../App/Slices/baseurl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CountdownTimer = _ref => {\n  _s();\n  let {\n    minutes,\n    seconds\n  } = _ref;\n  const [time, setTime] = useState({\n    minutes,\n    seconds\n  });\n  const [target, setTarget] = useState(0);\n  const {\n    sendMessage\n  } = useWebSocket(BASE_URL, {\n    onOpen: () => console.log('connection opened'),\n    onClose: () => console.log('connection closed'),\n    onMessage: message => {\n      if (target !== JSON.parse(message.data.targetTime)) {\n        setTarget(JSON.parse(message.data.targetTime));\n      }\n    },\n    share: true,\n    ///maybe share should be false\n    retryOnError: true,\n    shouldReconnect: () => true\n  });\n  const handleReset = () => {\n    setTime({\n      minutes: time.minutes,\n      seconds: time.seconds\n    });\n    ///needs to also set the target time to Date.now+60000\n    const newTime = {\n      timer: Date.now() + 60000\n    };\n    sendMessage(JSON.stringify(newTime));\n  };\n  const tick = () => {\n    if (time.minutes === 0 && time.seconds === 0) {\n      setTime({\n        minutes: 0,\n        seconds: 0\n      });\n    } else if (time.seconds === 0) {\n      setTime({\n        minutes: time.minutes - 1,\n        seconds: 59\n      });\n    } else {\n      setTime({\n        minutes: time.minutes,\n        seconds: time.seconds - 1\n      });\n    }\n  };\n\n  ///this news effect needs to reset if the target changes I believe putting it in the dependency array does this\n  useEffect(() => {\n    if (target > Date.now()) {\n      const timerId = setInterval(() => tick(), 1000);\n      return () => clearInterval(timerId);\n    } else {\n      handleReset();\n    }\n  }, [target]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timer\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: `${time.minutes.toString().padStart(2, '0')}:${time.seconds.toString().padStart(2, '0')}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(CountdownTimer, \"zY7iD2FiEAh6Wl72T/cUSX1p3DU=\", false, function () {\n  return [useWebSocket];\n});\n_c = CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["useEffect","useState","useWebSocket","BASE_URL","jsxDEV","_jsxDEV","CountdownTimer","_ref","_s","minutes","seconds","time","setTime","target","setTarget","sendMessage","onOpen","console","log","onClose","onMessage","message","JSON","parse","data","targetTime","share","retryOnError","shouldReconnect","handleReset","newTime","timer","Date","now","stringify","tick","timerId","setInterval","clearInterval","className","children","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jamari/Documents/Hobbies/Coding/draftlol/client/src/Components/CountdownTimer.tsx"],"sourcesContent":["import {useEffect,useState} from 'react'\r\nimport { Timer } from '../App/Types/timer-types'\r\nimport '../Pages/draft-styles.css'\r\nimport { useWebSocket } from 'react-use-websocket/dist/lib/use-websocket'\r\nimport { BASE_URL } from '../App/Slices/baseurl'\r\nimport { DraftList } from '../App/Types/champ-select-types'\r\n\r\nexport const CountdownTimer = ({minutes,seconds}:Timer) => { \r\n  const [time, setTime] = useState<Timer>({minutes,seconds})\r\n  const [target, setTarget] = useState(0)\r\n  \r\n  const {sendMessage} = useWebSocket(BASE_URL, {\r\n    onOpen: () => console.log('connection opened'),\r\n    onClose: () => console.log('connection closed'),\r\n    onMessage: (message:WebSocketEventMap['message']) => {\r\n      if(target!==JSON.parse(message.data.targetTime)){setTarget(JSON.parse(message.data.targetTime))}\r\n    },\r\n    share:true, ///maybe share should be false\r\n    retryOnError: true,\r\n    shouldReconnect: () => true\r\n  })\r\n  \r\n  const handleReset = () => {\r\n    setTime({minutes: time.minutes, seconds: time.seconds})\r\n    ///needs to also set the target time to Date.now+60000\r\n    const newTime = {\r\n\r\n      timer: Date.now()+60000\r\n    }\r\n    sendMessage(JSON.stringify(newTime))\r\n  }\r\n  \r\n\r\n  const tick = () => {\r\n    if (time.minutes === 0 && time.seconds === 0) {\r\n      setTime({minutes: 0, seconds: 0})\r\n    }\r\n    else if (time.seconds===0) {\r\n      setTime({minutes: time.minutes-1, seconds: 59})\r\n    }\r\n    else {\r\n      setTime({minutes: time.minutes, seconds: time.seconds-1})\r\n    }\r\n  }\r\n\r\n  ///this news effect needs to reset if the target changes I believe putting it in the dependency array does this\r\n  useEffect(() => {\r\n    if(target>Date.now()){\r\n      const timerId = setInterval(() => tick(), 1000);\r\n    return () => clearInterval(timerId)\r\n    }\r\n    else{handleReset()}\r\n  },[target])\r\n\r\n  return (\r\n    <div className='timer'>\r\n      <p>{`${time.minutes.toString().padStart(2, '0')}:${time.seconds.toString().padStart(2, '0')}`}</p> \r\n    </div>\r\n  )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}