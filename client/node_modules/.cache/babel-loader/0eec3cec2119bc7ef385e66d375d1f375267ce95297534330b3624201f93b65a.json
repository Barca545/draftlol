{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jamari\\\\Documents\\\\Hobbies\\\\Coding\\\\draftlol\\\\client\\\\src\\\\Components\\\\CountdownTimer.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { isTimer } from '../App/Types/champ-select-types';\nimport '../Pages/draft-styles.css';\nimport { useWebSocket } from 'react-use-websocket/dist/lib/use-websocket';\nimport { BASE_URL } from '../App/Slices/baseurl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CountdownTimer = _ref => {\n  _s();\n  let {\n    isBlue\n  } = _ref;\n  const [time, setTime] = useState(null);\n  const {\n    sendMessage\n  } = useWebSocket(BASE_URL, {\n    onOpen: () => console.log('connection opened'),\n    onClose: () => console.log('connection closed'),\n    onMessage: message => {\n      let timer = JSON.parse(message.data);\n      if (isTimer(timer)) {\n        setTime(timer);\n      }\n    },\n    share: true,\n    ///maybe share should be false\n    retryOnError: true,\n    shouldReconnect: () => true\n  });\n  const handleReset = () => {\n    sendMessage(JSON.stringify({\n      seconds: 60\n    }));\n  };\n  const tick = () => {\n    if (time !== null) {\n      if (time.seconds > 0) {\n        setTime({\n          seconds: time.seconds - 1\n        });\n        if (isBlue) sendMessage(JSON.stringify({\n          seconds: time.seconds - 1\n        }));\n      }\n    }\n  };\n\n  ///this news effect needs to reset if the target changes I believe putting it in the dependency array does this\n  ///connect thing to handleConfirm to reset the timer\n  useEffect(() => {\n    if ((time === null || time === void 0 ? void 0 : time.seconds) === 0) {\n      handleReset();\n    } else {\n      const timerId = setInterval(() => tick(), 1000);\n      return () => clearInterval(timerId);\n    }\n  }, [time]);\n  if ((time === null || time === void 0 ? void 0 : time.seconds) != undefined) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${time.seconds.toString().padStart(2, '0')}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n_s(CountdownTimer, \"KjVzS3SFrFb2syniYJeYFO+7Jjg=\", false, function () {\n  return [useWebSocket];\n});\n_c = CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["useEffect","useState","isTimer","useWebSocket","BASE_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","CountdownTimer","_ref","_s","isBlue","time","setTime","sendMessage","onOpen","console","log","onClose","onMessage","message","timer","JSON","parse","data","share","retryOnError","shouldReconnect","handleReset","stringify","seconds","tick","timerId","setInterval","clearInterval","undefined","className","children","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jamari/Documents/Hobbies/Coding/draftlol/client/src/Components/CountdownTimer.tsx"],"sourcesContent":["import {useEffect,useState} from 'react'\r\nimport { Timer, isTimer} from '../App/Types/champ-select-types'\r\nimport '../Pages/draft-styles.css'\r\nimport { useWebSocket } from 'react-use-websocket/dist/lib/use-websocket'\r\nimport { BASE_URL } from '../App/Slices/baseurl'\r\n\r\ntype BlueCheck = {isBlue:boolean}\r\n\r\nexport const CountdownTimer = ({isBlue}:BlueCheck) => { \r\n  const [time, setTime] = useState<Timer|null>(null)\r\n\r\n  const {sendMessage} = useWebSocket(BASE_URL, {\r\n    onOpen: () => console.log('connection opened'),\r\n    onClose: () => console.log('connection closed'),\r\n    onMessage: (message:WebSocketEventMap['message']) => {\r\n      let timer:Timer = JSON.parse(message.data)\r\n      if(isTimer(timer)){\r\n        setTime(timer)\r\n      }\r\n    },\r\n\r\n    share:true, ///maybe share should be false\r\n    retryOnError: true,\r\n    shouldReconnect: () => true\r\n  })\r\n  \r\n  const handleReset = () => {\r\n    sendMessage(JSON.stringify({seconds:60}))\r\n  }\r\n  \r\n  const tick = () => {\r\n    if (time!==null){\r\n      if (time.seconds>0) {\r\n        setTime({seconds:time.seconds-1})\r\n        if (isBlue) (sendMessage(JSON.stringify({seconds:time.seconds-1})))\r\n      }\r\n    }  \r\n  }\r\n\r\n  ///this news effect needs to reset if the target changes I believe putting it in the dependency array does this\r\n  ///connect thing to handleConfirm to reset the timer\r\n  useEffect(() => {\r\n    if(time?.seconds===0){\r\n      handleReset()\r\n    }\r\n    else{ \r\n      const timerId = setInterval(() => tick(), 1000);\r\n      return () => clearInterval(timerId)\r\n    }\r\n  },[time])\r\n  \r\n  if(time?.seconds!=undefined){\r\n    return (\r\n      <div className='timer'>\r\n        <p>{`${time.seconds.toString().padStart(2, '0')}`}</p> \r\n      </div>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <></>\r\n    )\r\n  }\r\n  \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}