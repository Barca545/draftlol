[{"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\index.tsx":"1","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App.tsx":"3","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\store.ts":"4","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\Pages\\SpectatorDraft.tsx":"5","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\Pages\\RedDraft.tsx":"6","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\Pages\\BlueDraft.tsx":"7","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\Slices\\apiSlice.ts":"8","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\Slices\\baseurl.ts":"9","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initialDraftList.ts":"10","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\Components\\CountdownTimer.tsx":"11","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initialTop.ts":"12","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initalMid.ts":"13","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initalJungle.ts":"14","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initalBottom.ts":"15","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initialSupport.ts":"16","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initalAllChamps.ts":"17","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\Types\\champ-select-types.ts":"18","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\Pages\\CreateDraft.tsx":"19"},{"size":697,"mtime":1687979727463,"results":"20","hashOfConfig":"21"},{"size":440,"mtime":1687979727464,"results":"22","hashOfConfig":"21"},{"size":720,"mtime":1688234031701,"results":"23","hashOfConfig":"21"},{"size":514,"mtime":1688027920785,"results":"24","hashOfConfig":"21"},{"size":8119,"mtime":1688195549799,"results":"25","hashOfConfig":"21"},{"size":11752,"mtime":1688198773340,"results":"26","hashOfConfig":"21"},{"size":11987,"mtime":1688251942905,"results":"27","hashOfConfig":"21"},{"size":552,"mtime":1688030837497,"results":"28","hashOfConfig":"21"},{"size":111,"mtime":1688252111899,"results":"29","hashOfConfig":"21"},{"size":2185,"mtime":1688189573663,"results":"30","hashOfConfig":"21"},{"size":1801,"mtime":1688252784100,"results":"31","hashOfConfig":"21"},{"size":4871,"mtime":1688007958817,"results":"32","hashOfConfig":"21"},{"size":5908,"mtime":1688008544001,"results":"33","hashOfConfig":"21"},{"size":4077,"mtime":1688008927236,"results":"34","hashOfConfig":"21"},{"size":1862,"mtime":1688015080972,"results":"35","hashOfConfig":"21"},{"size":2676,"mtime":1688015404861,"results":"36","hashOfConfig":"21"},{"size":13127,"mtime":1688026827649,"results":"37","hashOfConfig":"21"},{"size":906,"mtime":1688193428975,"results":"38","hashOfConfig":"21"},{"size":105,"mtime":1688235872729,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aerm5y",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\index.tsx",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\reportWebVitals.ts",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App.tsx",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\store.ts",["103"],[],"import { configureStore } from \"@reduxjs/toolkit\";\r\nimport {combineReducers } from '@reduxjs/toolkit'\r\nimport { apiSlice } from \"./Slices/apiSlice\";\r\n\r\nexport const store =  configureStore({\r\n    reducer:{\r\n        [apiSlice.reducerPath]: apiSlice.reducer,\r\n    },\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(apiSlice.middleware),\r\n  })\r\n  \r\n   \r\n  export type RootState = ReturnType<typeof store.getState>;\r\n  export type AppDispatch = typeof store.dispatch;\r\n  \r\n  export default store","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\Pages\\SpectatorDraft.tsx",["104","105","106"],[],"import { useEffect, useState } from 'react'\r\nimport '../Pages/draft-styles.css'\r\nimport { DraftList} from '../App/Types/champ-select-types'\r\nimport { BASE_URL } from '../App/Slices/baseurl'\r\nimport {useWebSocket} from 'react-use-websocket/dist/lib/use-websocket'\r\nimport { useGetListQuery } from '../App/Slices/apiSlice'\r\nimport {initialDraftList} from '../App/InitialStates/initialDraftList'\r\nimport { CountdownTimer } from '../Components/CountdownTimer'\r\n\r\n\r\nexport const SpectatorDraft = () => {\r\n  const { data, error, isLoading, isSuccess} = useGetListQuery('draftlist/')\r\n  \r\n  useEffect(()=>{\r\n    if (isSuccess===true && data.champList!==undefined){  \r\n      setNewDraft(data)\r\n    }\r\n    else{}\r\n  },[isSuccess])\r\n  \r\n  const [newDraft, setNewDraft] = useState<DraftList>(initialDraftList)\r\n\r\n  useWebSocket(BASE_URL, {\r\n    onOpen: () => console.log('connection opened'),\r\n    onClose: () => console.log('connection closed'),\r\n    onMessage: (message:WebSocketEventMap['message']) => {\r\n      const response:DraftList = JSON.parse(message.data);\r\n      setNewDraft(response)\r\n    },\r\n    share:true, ///maybe share should be false\r\n    retryOnError: true,\r\n    shouldReconnect: () => true\r\n  })\r\n\r\n  const ChampSelect = () => {\r\n    const [champList,setChampList] = useState(newDraft.champList) \r\n    const [input,setInput] = useState('')\r\n    const [laneView,setLaneView] = useState('ALL')\r\n    \r\n    useEffect(()=>{\r\n      if (laneView==='TOP') {setChampList(newDraft.topList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='JUNGLE') {setChampList(newDraft.jgList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='MID') {setChampList(newDraft.midList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='BOTTOM') {setChampList(newDraft.bottomList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='SUPPORT') {setChampList(newDraft.supportList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else {setChampList(newDraft.champList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n    },[input])\r\n\r\n    const handleSearch = (search:any) => {\r\n      setInput(search)\r\n      console.log(input)\r\n    }\r\n\r\n    const LaneSelect = () => {     \r\n      return(\r\n        <div className='lane-select'>\r\n          <input type='button' value={'ALL'} onClick={()=>{setChampList(newDraft.champList);setLaneView('ALL')}}/>\r\n          <input type='button' value={'TOP'} onClick={()=>{setChampList(newDraft.topList);setLaneView('TOP')}}/>\r\n          <input type='button' value={'JUNGLE'} onClick={()=>{setChampList(newDraft.jgList);setLaneView('JUNGLE')}}/>\r\n          <input type='button' value={'MIDDLE'} onClick={()=>{setChampList(newDraft.midList);setLaneView('MIDDLE')}}/>\r\n          <input type='button' value={'BOTTOM'} onClick={()=>{setChampList(newDraft.bottomList);setLaneView('BOTTOM')}}/>\r\n          <input type='button' value={'SUPPORT'} onClick={()=>{setChampList(newDraft.supportList);setLaneView('SUPPORT')}}/>\r\n       </div>\r\n      )\r\n    }\r\n    \r\n    const ChampList = () => {\r\n      return(\r\n          <div className='champ-list'>\r\n            {champList.map((item)=>{\r\n              return(\r\n                <div \r\n                  className='champion' \r\n                  key={item[0]} id={item[0]}>\r\n                  <img src={item[1]} alt=''/>\r\n                </div>)}\r\n              )\r\n            }\r\n          </div>)}\r\n\r\n    return (\r\n      <div className='champ-select'>\r\n        <input className='search-bar' type='text'  placeholder='Find Champion...' value={input} onChange={(e)=>{handleSearch(e.target.value)}}/>\r\n        <LaneSelect/>\r\n        <ChampList/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const BlueSideDraft = () => {\r\n    if (isLoading){\r\n      return(<></>)\r\n    }\r\n    if (isSuccess) {\r\n      return(\r\n        <div className=\"blue-side\">\r\n          <div className='blue-summoner-1'>\r\n            <img className='champselect-image' src={newDraft.blueSummonerlist[0].icon} alt=''/>\r\n          </div>\r\n          <div className='blue-summoner-2'>\r\n            <img className='champselect-image' src={newDraft.blueSummonerlist[1].icon} alt=''/>\r\n          </div>\r\n          <div className='blue-summoner-3'>\r\n            <img className='champselect-image' src={newDraft.blueSummonerlist[2].icon} alt=''/>\r\n          </div>\r\n          <div className='blue-summoner-4'>\r\n            <img className='champselect-image' src={newDraft.blueSummonerlist[3].icon} alt=''/>   \r\n          </div>\r\n          <div className='blue-summoner-5'>\r\n            <img className='champselect-image' src={newDraft.blueSummonerlist[4].icon} alt=''/>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    else{\r\n      return(<></>)\r\n    }\r\n  }\r\n  const BlueSideBans = () => {\r\n    if (isLoading){\r\n      return(<></>)\r\n    }\r\n    else if (isSuccess){\r\n      return(\r\n        <div className='blue-side-bans'>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.blueBanlist[0].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.blueBanlist[1].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.blueBanlist[2].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.blueBanlist[3].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.blueBanlist[4].icon} alt=''/>\r\n          </span>\r\n        </div>\r\n      )}\r\n    else{\r\n      return(null)\r\n    }\r\n    \r\n  }\r\n  const RedSideBans = () => {\r\n    if (isLoading){\r\n      return(<></>)\r\n    }\r\n    else if (isSuccess){\r\n      return(\r\n        <div className='red-side-bans'>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.redBanlist[4].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.redBanlist[3].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.redBanlist[2].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.redBanlist[1].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.redBanlist[0].icon} alt=''/>\r\n          </span>\r\n        </div>\r\n      )}\r\n    else{\r\n      return(null)\r\n    }\r\n    \r\n  }\r\n\r\n  const RedSideDraft = () => {\r\n    if (isLoading){\r\n      return(<></>)\r\n    }\r\n    if (isSuccess) {\r\n      return(\r\n        <div className=\"red-side\">\r\n        <div className='red-summoner-1'>\r\n          <img className='champselect-image' src={newDraft.redSummonerlist[0].icon} alt=''/>\r\n        </div>\r\n        <div className='red-summoner-2'>\r\n          <img className='champselect-image' src={newDraft.redSummonerlist[1].icon} alt=''/>\r\n        </div>\r\n        <div className='red-summoner-3'>\r\n          <img className='champselect-image' src={newDraft.redSummonerlist[2].icon} alt=''/>\r\n        </div>\r\n        <div className='red-summoner-4'>\r\n        <img className='champselect-image' src={newDraft.redSummonerlist[3].icon} alt=''/>   \r\n        </div>\r\n        <div className='red-summoner-5'>\r\n          <img className='champselect-image' src={newDraft.redSummonerlist[4].icon} alt=''/>\r\n        </div>\r\n      </div>\r\n      )\r\n    }\r\n    else{\r\n      return(<></>)\r\n    }\r\n  }\r\n\r\n  return( \r\n    <div className=\"grid-container\">\r\n      <CountdownTimer/>\r\n      <BlueSideDraft/>\r\n      <RedSideDraft/>\r\n      <ChampSelect/>\r\n      <BlueSideBans/>\r\n      <RedSideBans/>\r\n      <div className='lock-button'/>\r\n    </div>\r\n  )\r\n}","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\Pages\\RedDraft.tsx",["107","108","109","110","111","112","113","114","115","116"],[],"import { useEffect, useState } from 'react'\r\nimport '../Pages/draft-styles.css'\r\nimport { DraftList,isTimer} from '../App/Types/champ-select-types'\r\nimport { BASE_URL } from '../App/Slices/baseurl'\r\nimport {useWebSocket} from 'react-use-websocket/dist/lib/use-websocket'\r\nimport { ReadyState } from 'react-use-websocket'\r\nimport { useGetListQuery} from '../App/Slices/apiSlice'\r\nimport {initialDraftList} from '../App/InitialStates/initialDraftList'\r\nimport { CountdownTimer } from '../Components/CountdownTimer'\r\n\r\nexport const RedDraft = () => {\r\n  const {data:draftData, error:draftError, isLoading:draftIsLoading, isSuccess:draftIsSuccess} = useGetListQuery('draftlist/')\r\n\r\n  useEffect(()=>{\r\n    if (draftIsSuccess===true && draftData.champList!==undefined){  \r\n      setNewDraft(draftData)\r\n    }\r\n    else{}\r\n  },[draftIsSuccess])\r\n  \r\n  const [newDraft, setNewDraft] = useState<DraftList>(initialDraftList)\r\n  const [outgoingDraft, setOutgoingDraft] = useState<DraftList|null>(null)\r\n  const [currentSelection, setCurrentSelection] = useState<string[]|null>(null)\r\n\r\n  const {sendMessage, lastMessage, readyState} = useWebSocket(BASE_URL, {\r\n    onOpen: () => console.log('connection opened'),\r\n    onClose: () => console.log('connection closed'),\r\n    onMessage: (message:WebSocketEventMap['message']) => {\r\n      const data:DraftList = JSON.parse(message.data);\r\n      if(!isTimer(data)){\r\n        setNewDraft(data)\r\n      }\r\n    },\r\n    share:true, ///maybe share should be false\r\n    retryOnError: true,\r\n    shouldReconnect: () => true\r\n  })\r\n\r\n  const [pickIndex,setPickIndex] = useState(0)\r\n  const [banIndex,setBanIndex] = useState(0)\r\n  const [banPhase,setBanPhase] = useState(true)\r\n  \r\n  useEffect(()=>{\r\n    if (banIndex === 3 && pickIndex < 3 ){setBanPhase(false)}\r\n    else if (banIndex === 3 && pickIndex == 3 ){setBanPhase(true)}\r\n    else if (banIndex === 5 && pickIndex == 3 ){setBanPhase(false)}\r\n    \r\n    if (readyState === ReadyState.OPEN && outgoingDraft!==null) {    \r\n      sendMessage(JSON.stringify(outgoingDraft))\r\n      console.log(outgoingDraft.blueTurn)\r\n    }\r\n  },[readyState, outgoingDraft])\r\n\r\n  const handleConfirm = () => {\r\n    if (currentSelection!==null){\r\n      const newDraftList = {...newDraft,\r\n      blueTurn: true,\r\n      champList:[...newDraft.champList.filter((item)=>item[0]!==currentSelection[0])],\r\n      topList: [...newDraft.topList.filter((item)=>item[0]!==currentSelection[0])],\r\n      jgList:[...newDraft.jgList.filter((item)=>item[0]!==currentSelection[0])],\r\n      midList:[...newDraft.midList.filter((item)=>item[0]!==currentSelection[0])],\r\n      bottomList:[...newDraft.bottomList.filter((item)=>item[0]!==currentSelection[0])],\r\n      supportList:[...newDraft.supportList.filter((item)=>item[0]!==currentSelection[0])],\r\n      }\r\n\r\n      setNewDraft(newDraftList)\r\n      setOutgoingDraft(newDraftList)  \r\n      sendMessage(JSON.stringify({seconds:60}))\r\n    }\r\n    \r\n    if (banPhase == false&&newDraft.blueSummonerlist!==null){\r\n      if (newDraft.blueSummonerlist[pickIndex].name !==null) {\r\n        setPickIndex(pickIndex+1)\r\n      }\r\n    }\r\n    else if (newDraft.blueBanlist!==null) {\r\n      if (newDraft.blueBanlist[banIndex].champ!==null) {\r\n        setBanIndex(banIndex+1)\r\n      }\r\n    }\r\n  }\r\n\r\n  const ChampSelect = () => {\r\n    const [champList,setChampList] = useState(newDraft.champList) \r\n    const [input,setInput] = useState('')\r\n    const [laneView,setLaneView] = useState('ALL')\r\n    \r\n    useEffect(()=>{\r\n      if (laneView==='TOP') {setChampList(newDraft.topList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='JUNGLE') {setChampList(newDraft.jgList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='MID') {setChampList(newDraft.midList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='BOTTOM') {setChampList(newDraft.bottomList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='SUPPORT') {setChampList(newDraft.supportList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else {setChampList(newDraft.champList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n    },[input])\r\n\r\n    const handleSearch = (search:any) => {\r\n      setInput(search)\r\n      console.log(input)\r\n    }\r\n\r\n    const LaneSelect = () => {     \r\n      return(\r\n        <div className='lane-select'>\r\n          <input type='button' value={'ALL'} onClick={()=>{setChampList(newDraft.champList);setLaneView('ALL')}}/>\r\n          <input type='button' value={'TOP'} onClick={()=>{setChampList(newDraft.topList);setLaneView('TOP')}}/>\r\n          <input type='button' value={'JUNGLE'} onClick={()=>{setChampList(newDraft.jgList);setLaneView('JUNGLE')}}/>\r\n          <input type='button' value={'MIDDLE'} onClick={()=>{setChampList(newDraft.midList);setLaneView('MIDDLE')}}/>\r\n          <input type='button' value={'BOTTOM'} onClick={()=>{setChampList(newDraft.bottomList);setLaneView('BOTTOM')}}/>\r\n          <input type='button' value={'SUPPORT'} onClick={()=>{setChampList(newDraft.supportList);setLaneView('SUPPORT')}}/>\r\n       </div>\r\n      )\r\n    }\r\n\r\n    const handleChampSelect = (item:string[]) => {  \r\n      setCurrentSelection(item)\r\n      if(\r\n        newDraft.blueBanlist!=null\r\n        &&newDraft.blueSummonerlist!=null\r\n        &&newDraft.redBanlist!=null\r\n        &&newDraft.redSummonerlist!=null){\r\n        \r\n        let draft:DraftList = {...newDraft}\r\n\r\n      if (banPhase==false) {\r\n        draft.redSummonerlist[pickIndex] = {name: '',champ:item[0],icon:item[1]}\r\n        setOutgoingDraft(draft)\r\n  \r\n      }\r\n      else if (banPhase==true){\r\n        draft.redBanlist[banIndex] = {champ:item[0],icon:item[1]}\r\n        setOutgoingDraft(draft)\r\n      }}\r\n    }\r\n    \r\n    const ChampList = () => {\r\n      return(\r\n          <div className='champ-list'>\r\n            {champList.map((item)=>{\r\n              return(\r\n                <div \r\n                  className='champion' \r\n                  key={item[0]} id={item[0]} \r\n                  onClick={()=>{if(newDraft.blueTurn===false){handleChampSelect(item)}}}>\r\n                  <img src={item[1]} alt=''/>\r\n                </div>)}\r\n              )\r\n            }\r\n          </div>)}\r\n\r\n    return (\r\n      <div className='champ-select'>\r\n        <input className='search-bar' type='text'  placeholder='Find Champion...' value={input} onChange={(e)=>{handleSearch(e.target.value)}}/>\r\n        <LaneSelect/>\r\n        <ChampList/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const RoleSelect = () => {\r\n    return(\r\n      <div className='role-select'>\r\n        <select>\r\n          <option value=\"\" disabled selected hidden>Select Role...</option>\r\n          <option value='blue-top'>Top</option>\r\n          <option value='blue-jg'>Jungle</option>\r\n          <option value='blue-mid'>Middle</option>\r\n          <option value='blue-adc'>Bottom</option>\r\n          <option value='blue-sup'>Support</option>\r\n        </select>\r\n    </div>\r\n    )\r\n  }\r\n  const BlueSideDraft = () => {\r\n    if (draftIsLoading){\r\n      return(<></>)\r\n\r\n    }\r\n    if (draftIsSuccess) {\r\n      return(\r\n        <div className=\"blue-side\">\r\n          <div className='blue-summoner-1'>\r\n            <img className='champselect-image' src={newDraft.blueSummonerlist[0].icon} alt=''/>\r\n          </div>\r\n          <div className='blue-summoner-2'>\r\n            <img className='champselect-image' src={newDraft.blueSummonerlist[1].icon} alt=''/>\r\n          </div>\r\n          <div className='blue-summoner-3'>\r\n            <img className='champselect-image' src={newDraft.blueSummonerlist[2].icon} alt=''/>\r\n          </div>\r\n          <div className='blue-summoner-4'>\r\n            <img className='champselect-image' src={newDraft.blueSummonerlist[3].icon} alt=''/>   \r\n          </div>\r\n          <div className='blue-summoner-5'>\r\n            <img className='champselect-image' src={newDraft.blueSummonerlist[4].icon} alt=''/>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    else{\r\n      return(<></>)\r\n    }\r\n  }\r\n  const BlueSideBans = () => {\r\n    if (draftIsLoading){\r\n      return(<></>)\r\n    }\r\n    else if (draftIsSuccess){\r\n      return(\r\n        <div className='blue-side-bans'>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.blueBanlist[0].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.blueBanlist[1].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.blueBanlist[2].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.blueBanlist[3].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.blueBanlist[4].icon} alt=''/>\r\n          </span>\r\n        </div>\r\n      )}\r\n    else{\r\n      return(null)\r\n    }\r\n    \r\n  }\r\n\r\n  const RedSideBans = () => {\r\n    if (draftIsLoading){\r\n      return(<></>)\r\n    }\r\n    else if (draftIsSuccess){\r\n      return(\r\n        <div className='red-side-bans'>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.redBanlist[4].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.redBanlist[3].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.redBanlist[2].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.redBanlist[1].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={newDraft.redBanlist[0].icon} alt=''/>\r\n          </span>\r\n        </div>\r\n      )}\r\n    else{\r\n      return(null)\r\n    }\r\n    \r\n  }\r\n\r\n  const RedSideDraft = () => {\r\n    if (draftIsLoading){\r\n      return(<></>)\r\n    }\r\n    if (draftIsSuccess) {\r\n      return(\r\n        <div className=\"red-side\">\r\n        <div className='red-summoner-1'>\r\n          <RoleSelect/>\r\n          <img className='champselect-image' src={newDraft.redSummonerlist[0].icon} alt=''/>\r\n        </div>\r\n        <div className='red-summoner-2'>\r\n          <RoleSelect/>\r\n          <img className='champselect-image' src={newDraft.redSummonerlist[1].icon} alt=''/>\r\n        </div>\r\n        <div className='red-summoner-3'>\r\n          <RoleSelect/>\r\n          <img className='champselect-image' src={newDraft.redSummonerlist[2].icon} alt=''/>\r\n        </div>\r\n        <div className='red-summoner-4'>\r\n          <RoleSelect/>\r\n        <img className='champselect-image' src={newDraft.redSummonerlist[3].icon} alt=''/>   \r\n        </div>\r\n        <div className='red-summoner-5'>\r\n          <RoleSelect/>\r\n          <img className='champselect-image' src={newDraft.redSummonerlist[4].icon} alt=''/>\r\n        </div>\r\n      </div>\r\n      )\r\n    }\r\n    else{\r\n      return(<></>)\r\n    }\r\n  }\r\n\r\n  ///possibly should be inside of the champlist but that requires redoing CSS (gross)\r\n\r\n  return( \r\n    <div className=\"grid-container\">\r\n      <CountdownTimer/>\r\n      <BlueSideDraft/>\r\n      <RedSideDraft/>\r\n      <ChampSelect/>\r\n      <BlueSideBans/>\r\n      <RedSideBans/>\r\n      <div className='lock-button'>\r\n        <input className='confirm-button' type='button' value={'LOCK'} onClick={()=>handleConfirm()}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\Pages\\BlueDraft.tsx",["117","118","119","120"],[],"import {useEffect, useState } from 'react'\r\nimport '../Pages/draft-styles.css'\r\nimport { DraftList,isTimer} from '../App/Types/champ-select-types'\r\nimport { BASE_URL } from '../App/Slices/baseurl'\r\nimport {useWebSocket} from 'react-use-websocket/dist/lib/use-websocket'\r\nimport { ReadyState } from 'react-use-websocket'\r\nimport { useGetListQuery } from '../App/Slices/apiSlice'\r\nimport {initialDraftList} from '../App/InitialStates/initialDraftList'\r\nimport { CountdownTimer } from '../Components/CountdownTimer'\r\n\r\nexport const BlueDraft = () => {\r\n  const { data,isLoading, isSuccess} = useGetListQuery('draftlist/')\r\n  \r\n  useEffect(()=>{\r\n    if (isSuccess===true && data.champList!==undefined){  \r\n      setDraft(data)\r\n    }\r\n    else{}\r\n  },[isSuccess])\r\n  \r\n  const [draft, setDraft] = useState<DraftList>(initialDraftList)\r\n  const [updatedDraft, setUpdatedDraft] = useState<DraftList|null>(null)\r\n  const [currentSelection, setCurrentSelection] = useState<string[]|null>(null) \r\n  const [pickIndex,setPickIndex] = useState(0)\r\n  const [banIndex,setBanIndex] = useState(0)\r\n  const [banPhase,setBanPhase] = useState(true)\r\n  const [blueTurn, setBlueTurn] = useState(true)\r\n\r\n  const {sendMessage,readyState} = useWebSocket(BASE_URL, {\r\n    onOpen: () => console.log('connection opened'),\r\n    onClose: () => console.log('connection closed'),\r\n    onMessage: (message:WebSocketEventMap['message']) => {\r\n      let data:DraftList = JSON.parse(message.data)\r\n      if(!isTimer(data)){\r\n        ///let incomingDraft =\r\n        setDraft(data)\r\n      }\r\n    },\r\n    share:true, ///maybe share should be false\r\n    retryOnError: true,\r\n    shouldReconnect: () => true\r\n  })\r\n\r\n  useEffect(()=>{\r\n    if (banIndex === 3 && pickIndex < 3 ){setBanPhase(false)}\r\n    else if (banIndex === 3 && pickIndex === 3 ){setBanPhase(true)}\r\n    else if (banIndex === 5 && pickIndex === 3 ){setBanPhase(false)}\r\n    ///this is causing the entire page to refresh\r\n    ///another solution might be to disambiguate the JSON and have the champlist be its own thing\r\n    ///then I can reset champlist only after confirm\r\n    if (readyState === ReadyState.OPEN && updatedDraft!==null) {    \r\n      sendMessage(JSON.stringify(updatedDraft))\r\n    }\r\n  },[readyState, updatedDraft, banIndex, pickIndex])\r\n\r\n\r\n  const handleConfirm = () => {\r\n    if (currentSelection!==null){    \r\n      const newDraftList = {...draft,\r\n        champList:[...draft.champList.filter((item)=>item[0]!==currentSelection[0])],\r\n        topList: [...draft.topList.filter((item)=>item[0]!==currentSelection[0])],\r\n        jgList:[...draft.jgList.filter((item)=>item[0]!==currentSelection[0])],\r\n        midList:[...draft.midList.filter((item)=>item[0]!==currentSelection[0])],\r\n        bottomList:[...draft.bottomList.filter((item)=>item[0]!==currentSelection[0])],\r\n        supportList:[...draft.supportList.filter((item)=>item[0]!==currentSelection[0])],\r\n      }\r\n      setDraft(newDraftList)\r\n      setUpdatedDraft(newDraftList)  \r\n      sendMessage(JSON.stringify({seconds:60}))\r\n    }\r\n    \r\n    if (banPhase === false&&draft.blueSummonerlist!==null){\r\n      if (draft.blueSummonerlist[pickIndex].name!==null) {\r\n        setPickIndex(pickIndex+1)\r\n      }\r\n    }\r\n    else if (draft.blueBanlist!==null) {\r\n      if (draft.blueBanlist[banIndex].champ!==null) {\r\n        setBanIndex(banIndex+1)\r\n      }\r\n    }\r\n  }\r\n\r\n///what is causing the whole app to rerender?\r\n  const ChampSelect = () => {\r\n    const [champList,setChampList] = useState(draft.champList) \r\n    const [input,setInput] = useState('')\r\n    const [laneView,setLaneView] = useState('ALL')\r\n\r\n    useEffect(()=>{\r\n      if (laneView==='TOP') {}\r\n      else if (laneView==='JUNGLE') {setChampList(draft.jgList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='MID') {setChampList(draft.midList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='BOTTOM') {setChampList(draft.bottomList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else if (laneView==='SUPPORT') {setChampList(draft.supportList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n      else {setChampList(draft.champList.filter(array => array[0].toLowerCase().includes(input.toLowerCase())))}\r\n    },[laneView])\r\n\r\n    const handleSearch = (search:any) => {\r\n      setInput(search)\r\n      console.log(input)\r\n    }\r\n\r\n    const LaneSelect = () => {     \r\n      return(\r\n        <div className='lane-select'>\r\n          <input type='button' value={'ALL'} onClick={()=>{setChampList(draft.champList);setLaneView('ALL')}}/>\r\n          <input type='button' value={'TOP'} onClick={()=>{setChampList(draft.topList);setLaneView('TOP')}}/>\r\n          <input type='button' value={'JUNGLE'} onClick={()=>{setChampList(draft.jgList);setLaneView('JUNGLE')}}/>\r\n          <input type='button' value={'MIDDLE'} onClick={()=>{setChampList(draft.midList);setLaneView('MIDDLE')}}/>\r\n          <input type='button' value={'BOTTOM'} onClick={()=>{setChampList(draft.bottomList);setLaneView('BOTTOM')}}/>\r\n          <input type='button' value={'SUPPORT'} onClick={()=>{setChampList(draft.supportList);setLaneView('SUPPORT')}}/>\r\n       </div>\r\n      )\r\n    }\r\n\r\n    const handleChampSelect = (item:string[]) => {  \r\n      setCurrentSelection(item)\r\n      if(\r\n        draft.blueBanlist!==null\r\n        &&draft.blueSummonerlist!==null\r\n        &&draft.redBanlist!==null\r\n        &&draft.redSummonerlist!==null){\r\n        \r\n        let newDraft:DraftList = {...draft}\r\n  \r\n      if (banPhase===false) {\r\n        debugger\r\n        newDraft.blueSummonerlist[pickIndex] = {name: '',champ:item[0],icon:item[1]}\r\n        setUpdatedDraft(draft)\r\n  \r\n      }\r\n      else if (banPhase===true){\r\n        newDraft.blueBanlist[banIndex] = {champ:item[0],icon:item[1]}\r\n        setUpdatedDraft(newDraft)\r\n      }}\r\n    }\r\n    \r\n    const ChampList = () => {\r\n      return(\r\n          <div className='champ-list'>\r\n            {champList.map((item)=>{\r\n              return(\r\n                <div \r\n                  className='champion' \r\n                  key={item[0]} id={item[0]} \r\n                  onClick={()=>{if(blueTurn===true){handleChampSelect(item)}}}>\r\n                  <img src={item[1]} alt=''/>\r\n                </div>)}\r\n              )\r\n            }\r\n          </div>)}\r\n\r\n    return (\r\n      <div className='champ-select'>\r\n        <input className='search-bar' type='text'  placeholder='Find Champion...' value={input} onChange={(e)=>{handleSearch(e.target.value)}}/>\r\n        <LaneSelect/>\r\n        <ChampList/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const RoleSelect = () => {\r\n    return(\r\n      <div className='role-select'>\r\n        <select className='roles'>\r\n          <option defaultValue=''>Select Role...</option>\r\n          <option value='blue-top'>Top</option>\r\n          <option value='blue-jg'>Jungle</option>\r\n          <option value='blue-mid'>Middle</option>\r\n          <option value='blue-adc'>Bottom</option>\r\n          <option value='blue-sup'>Support</option>\r\n        </select>\r\n        <select className='discord-ids'>\r\n          <option defaultValue=''>Select Role...</option>\r\n          <option value='blue-top'>Top</option>\r\n          <option value='blue-jg'>Jungle</option>\r\n          <option value='blue-mid'>Middle</option>\r\n          <option value='blue-adc'>Bottom</option>\r\n          <option value='blue-sup'>Support</option>\r\n        </select>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  const BlueSideDraft = () => {\r\n\r\n    \r\n    if (isLoading){\r\n      return(<></>)\r\n    }\r\n    if (isSuccess) {\r\n      return(\r\n        <div className=\"blue-side\">\r\n          <div className='blue-summoner-1'>\r\n            <img className='champselect-image' src={draft.blueSummonerlist[0].icon} alt=''/>\r\n            <RoleSelect/>\r\n          </div>\r\n          <div className='blue-summoner-2'>\r\n            <img className='champselect-image' src={draft.blueSummonerlist[1].icon} alt=''/>\r\n            <RoleSelect/>\r\n          </div>\r\n          <div className='blue-summoner-3'>\r\n            <img className='champselect-image' src={draft.blueSummonerlist[2].icon} alt=''/>\r\n            <RoleSelect/>\r\n          </div>\r\n          <div className='blue-summoner-4'>\r\n            <img className='champselect-image' src={draft.blueSummonerlist[3].icon} alt=''/>   \r\n            <RoleSelect/>\r\n          </div>\r\n          <div className='blue-summoner-5'>\r\n            <img className='champselect-image' src={draft.blueSummonerlist[4].icon} alt=''/>\r\n            <RoleSelect/>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    else{\r\n      return(<></>)\r\n    }\r\n  }\r\n\r\n  const BlueSideBans = () => {\r\n    if (isLoading){\r\n      return(<></>)\r\n    }\r\n    else if (isSuccess){\r\n      return(\r\n        <div className='blue-side-bans'>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={draft.blueBanlist[0].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={draft.blueBanlist[1].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={draft.blueBanlist[2].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={draft.blueBanlist[3].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={draft.blueBanlist[4].icon} alt=''/>\r\n          </span>\r\n        </div>\r\n      )}\r\n    else{\r\n      return(null)\r\n    }\r\n    \r\n  }\r\n\r\n  const RedSideBans = () => {\r\n    if (isLoading){\r\n      return(<></>)\r\n    }\r\n    else if (isSuccess){\r\n      return(\r\n        <div className='red-side-bans'>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={draft.redBanlist[4].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={draft.redBanlist[3].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={draft.redBanlist[2].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={draft.redBanlist[1].icon} alt=''/>\r\n          </span>\r\n          <span className='ban-image-wrapper'>\r\n            <img className='ban-image' src={draft.redBanlist[0].icon} alt=''/>\r\n          </span>\r\n        </div>\r\n      )}\r\n    else{\r\n      return(null)\r\n    }\r\n    \r\n  }\r\n\r\n  const RedSideDraft = () => {\r\n    if (isLoading){\r\n      return(<></>)\r\n    }\r\n    if (isSuccess) {\r\n      return(\r\n        <div className=\"red-side\">\r\n        <div className='red-summoner-1'>\r\n          <img className='champselect-image' src={draft.redSummonerlist[0].icon} alt=''/>\r\n        </div>\r\n        <div className='red-summoner-2'>\r\n          <img className='champselect-image' src={draft.redSummonerlist[1].icon} alt=''/>\r\n        </div>\r\n        <div className='red-summoner-3'>\r\n          <img className='champselect-image' src={draft.redSummonerlist[2].icon} alt=''/>\r\n        </div>\r\n        <div className='red-summoner-4'>\r\n        <img className='champselect-image' src={draft.redSummonerlist[3].icon} alt=''/>   \r\n        </div>\r\n        <div className='red-summoner-5'>\r\n          <img className='champselect-image' src={draft.redSummonerlist[4].icon} alt=''/>\r\n        </div>\r\n      </div>\r\n      )\r\n    }\r\n    else{\r\n      return(<></>)\r\n    }\r\n  }\r\n\r\n  return( \r\n    <div className=\"grid-container\">\r\n      <CountdownTimer/>\r\n      <BlueSideDraft/>\r\n      <RedSideDraft/>\r\n      <ChampSelect/>\r\n      <BlueSideBans/>\r\n      <RedSideBans/>\r\n      <div className='lock-button'>\r\n        <input className='confirm-button' type='button' value={'LOCK'} onClick={()=>handleConfirm()}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\Slices\\apiSlice.ts",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\Slices\\baseurl.ts",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initialDraftList.ts",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\Components\\CountdownTimer.tsx",["121","122"],[],"import {useEffect,useState} from 'react'\r\nimport { Timer, isTimer} from '../App/Types/champ-select-types'\r\nimport '../Pages/draft-styles.css'\r\nimport { useWebSocket } from 'react-use-websocket/dist/lib/use-websocket'\r\nimport { BASE_URL } from '../App/Slices/baseurl'\r\n\r\nexport const CountdownTimer = () => { \r\n  const [time, setTime] = useState<Timer|null>(null)\r\n\r\n  const sleep = (seconds:number ) => new Promise(\r\n    resolve => setTimeout(resolve, seconds*1000)\r\n  )\r\n\r\n  const {sendMessage } = useWebSocket(`${BASE_URL}/sdfsdfsdfsdfdsfsfdsfsdf/timer`, {\r\n    onOpen: () => console.log('connection opened'),\r\n    onClose: () => console.log('connection closed'),\r\n    onMessage: (message:WebSocketEventMap['message']) => {\r\n      let timer:Timer = JSON.parse(message.data)\r\n      if(isTimer(timer)){\r\n        setTime(timer)\r\n      }\r\n    },\r\n    share:false, \r\n    retryOnError: true,\r\n    shouldReconnect: () => true\r\n  })\r\n  \r\n  const handleReset = async () => {\r\n    await sleep(2)\r\n    sendMessage(JSON.stringify({seconds:60}))\r\n  }\r\n  \r\n  const tick = () => {\r\n    if (time!==null){\r\n      if (time.seconds>0) {\r\n        const newTime = {seconds:time.seconds-1}\r\n        setTime(newTime)\r\n        ///I am sort of worried them both sending the message will cause issues but it seems to work\r\n        sendMessage(JSON.stringify(newTime))\r\n      }\r\n    }  \r\n  }\r\n\r\n  useEffect(() => {\r\n    if(time?.seconds===0){\r\n      handleReset()\r\n    }\r\n    else{ \r\n      const timerId = setInterval(() => tick(), 1000);\r\n      return () => clearInterval(timerId)\r\n    }\r\n  },[time])\r\n  \r\n  if(time?.seconds!=undefined){\r\n    return (\r\n      <div className='timer'>\r\n        <p>{`${time.seconds.toString().padStart(2, '0')}`}</p> \r\n      </div>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <></>\r\n    )\r\n  }\r\n}","C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initialTop.ts",[],[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initalMid.ts",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initalJungle.ts",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initalBottom.ts",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initialSupport.ts",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\InitialStates\\initalAllChamps.ts",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\App\\Types\\champ-select-types.ts",[],[],"C:\\Users\\Jamari\\Documents\\Hobbies\\Coding\\draftlol\\client\\src\\Pages\\CreateDraft.tsx",[],[],{"ruleId":"123","severity":1,"message":"124","line":2,"column":9,"nodeType":"125","messageId":"126","endLine":2,"endColumn":24},{"ruleId":"123","severity":1,"message":"127","line":12,"column":17,"nodeType":"125","messageId":"126","endLine":12,"endColumn":22},{"ruleId":"128","severity":1,"message":"129","line":19,"column":5,"nodeType":"130","endLine":19,"endColumn":16,"suggestions":"131"},{"ruleId":"128","severity":1,"message":"132","line":47,"column":7,"nodeType":"130","endLine":47,"endColumn":14,"suggestions":"133"},{"ruleId":"123","severity":1,"message":"134","line":12,"column":32,"nodeType":"125","messageId":"126","endLine":12,"endColumn":42},{"ruleId":"128","severity":1,"message":"135","line":19,"column":5,"nodeType":"130","endLine":19,"endColumn":21,"suggestions":"136"},{"ruleId":"123","severity":1,"message":"137","line":25,"column":23,"nodeType":"125","messageId":"126","endLine":25,"endColumn":34},{"ruleId":"138","severity":1,"message":"139","line":45,"column":42,"nodeType":"140","messageId":"141","endLine":45,"endColumn":44},{"ruleId":"138","severity":1,"message":"139","line":46,"column":42,"nodeType":"140","messageId":"141","endLine":46,"endColumn":44},{"ruleId":"128","severity":1,"message":"142","line":52,"column":5,"nodeType":"130","endLine":52,"endColumn":32,"suggestions":"143"},{"ruleId":"138","severity":1,"message":"139","line":71,"column":18,"nodeType":"140","messageId":"141","endLine":71,"endColumn":20},{"ruleId":"128","severity":1,"message":"132","line":95,"column":7,"nodeType":"130","endLine":95,"endColumn":14,"suggestions":"144"},{"ruleId":"138","severity":1,"message":"139","line":125,"column":19,"nodeType":"140","messageId":"141","endLine":125,"endColumn":21},{"ruleId":"138","severity":1,"message":"139","line":130,"column":24,"nodeType":"140","messageId":"141","endLine":130,"endColumn":26},{"ruleId":"128","severity":1,"message":"129","line":19,"column":5,"nodeType":"130","endLine":19,"endColumn":16,"suggestions":"145"},{"ruleId":"123","severity":1,"message":"146","line":27,"column":20,"nodeType":"125","messageId":"126","endLine":27,"endColumn":31},{"ruleId":"128","severity":1,"message":"147","line":54,"column":5,"nodeType":"130","endLine":54,"endColumn":52,"suggestions":"148"},{"ruleId":"128","severity":1,"message":"149","line":97,"column":7,"nodeType":"130","endLine":97,"endColumn":17,"suggestions":"150"},{"ruleId":"128","severity":1,"message":"151","line":52,"column":5,"nodeType":"130","endLine":52,"endColumn":11,"suggestions":"152"},{"ruleId":"138","severity":1,"message":"153","line":54,"column":19,"nodeType":"140","messageId":"141","endLine":54,"endColumn":21},"@typescript-eslint/no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["154"],"React Hook useEffect has a missing dependency: 'laneView'. Either include it or remove the dependency array.",["155"],"'draftError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'draftData'. Either include it or remove the dependency array.",["156"],"'lastMessage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'banIndex', 'pickIndex', and 'sendMessage'. Either include them or remove the dependency array.",["157"],["158"],["159"],"'setBlueTurn' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sendMessage'. Either include it or remove the dependency array.",["160"],"React Hook useEffect has a missing dependency: 'input'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setChampList' needs the current value of 'input'.",["161"],"React Hook useEffect has missing dependencies: 'handleReset' and 'tick'. Either include them or remove the dependency array.",["162"],"Expected '!==' and instead saw '!='.",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"165","fix":"171"},{"desc":"163","fix":"172"},{"desc":"173","fix":"174"},{"desc":"165","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [data, isSuccess]",{"range":"178","text":"179"},"Update the dependencies array to be: [input, laneView]",{"range":"180","text":"181"},"Update the dependencies array to be: [draftData, draftIsSuccess]",{"range":"182","text":"183"},"Update the dependencies array to be: [readyState, outgoingDraft, banIndex, pickIndex, sendMessage]",{"range":"184","text":"185"},{"range":"186","text":"181"},{"range":"187","text":"179"},"Update the dependencies array to be: [readyState, updatedDraft, banIndex, pickIndex, sendMessage]",{"range":"188","text":"189"},{"range":"190","text":"181"},"Update the dependencies array to be: [handleReset, tick, time]",{"range":"191","text":"192"},[709,720],"[data, isSuccess]",[2248,2255],"[input, laneView]",[821,837],"[draftData, draftIsSuccess]",[2106,2133],"[readyState, outgoingDraft, banIndex, pickIndex, sendMessage]",[4315,4322],[748,759],[2234,2281],"[readyState, updatedDraft, banIndex, pickIndex, sendMessage]",[4344,4354],[1569,1575],"[handleReset, tick, time]"]